+ 1) Task

+ а) Создаем экшен shared - список расшаренных задач,
экшен отличается от my тем, что к query создаваемому
для датапровайдера присоединен с помощью inner join релейшен taskUsers.
Во вьюхе shared выводим название и текст задач,
кнопку удаления доступа для всех юзеров,
работающую с подтверждением и отправкой по POST
(сделать по аналогии как кнопка удаления во view.php).
+ б) Создаем экшен accessed - список доступных чужих задач.
Во вьюхе accessed выводим название, текст,
имя автора со ссылкой на его страницу просмотра
и время создания.
+ в) Добавляем флэш-сообщения после создания,
изменения и удаления.
+ г) Добавляем при изменения и удалении проверку,
+ что текущий пользователь создатель задачи,
при просмотре создатель или имеющий доступ,
если нет - выбрасываем исключение.
+ д) Меняем редиректы после создания,
изменения и удаления на my.

+ 2)TaskUser

+ а) Сделать экшен deleteAll для удаления доступов к задаче.
Сделать проверку на то, что удаляем доступы именно
к своей задаче и
+ добавить экшен в VerbFilter
+ для выполнения только по POST.
После удаления добавляем флэш-сообщение
и редирект после на /task/shared.
+ б) Удаляем экшены index, update и view.

+ 3) Настраиваем layout

+ Добавляем в меню ссылки на список
расшаренных и доступных заметок.

+ 4)Настраиваем урлы

Урл страниц просмотра для всех контроллеров
д.б. вида /task/1

5) Дополнительно

Делаем возможность удалять доступ
к заметке одного конкретного пользователя.
+ 1) Во вьюхе task/view только для своей задачи!
вывести в помощью Gridview список всех доступов (TaskUser),
которых предоставили другим пользователям.
В таблице сделать одну кнопку - удаления,
ведущую на task-user/delete,
передающую в параметре id для task_user и работающую по POST.
2) В экшене task-user/delete реализовать проверку удаления
+ доступа именно к своей задаче - не запутайтесь
в данном случае в параметре id будет для task_user,
а не задачи! Добавить флэш сообщение после удаления.

