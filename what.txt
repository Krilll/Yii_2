1) $model->getTaskUsers()->exists() === false это конечно
лаконично и круто но проверяет полное отсутсвие расшаривания задачи,
а вот если добавить условие по ид текущего пользователя, то будет то,
 что нужно - проверка доступа пользователя
+ 2) join($model->getCreator()->select('username')->column())
зачем получать массив если нужно одно значение? scalar() же,
да здесь и методов не нужно ->creator->username,
обязательно пересмотрите урок по релешейнам


из телеграмма +


+ 1) return Yii::$app->getSecurity()->validatePassword...
2) оформление отступов
+ 3) где происходит запись в лог
=> UserController.php => public function actionLogin()
=> if ($model->load(Yii::$app->request->post()) && $model->login()) {
		$log = [
			'levels' => 'info',
			'categories' => 'info',
			'message' => 'Пользователь авторизован.'
		];
		Yii::info($log, 'info'); 
	}

1) Настраиваем задачи

+ Необходимо сделать экшен для показа списка своих заметок
и настроить экшен для создания задач:

+ а) В TaskQuery сделать метод byCreator($userId),
который должен добавлять условие по id создателя (creator_id = $userId).
Для этого можно изменить имеющийся там закоментированный метод active().
+ б) В TaskController cделать экшен my,
при создании датапровайдера добавив к $query созданный
в пункте "а" метод byCreator($userId) и подставив
вместо $userId Id текущего юзера.
+ в) Создать вьюху my скопировав или изменив вьюху
index - в таблице д.б. только столбцы title,
description, created_at,updated_at,действия.
Убедиться, что теперь в списке задач
выводятся только созданные текущим пользователем.
+ г) Добавить в столбце действий ссылку с иконкой
на /task-user/create/?taskId=ид_задачи
+ д) В методе actionCreate добавить флэш сообщение
об успешном создании и поменять редирект
после создания на созданный список своих задач.
+ е) В форме вьюхи task/ _form.php удалить все поля
кроме title и description.
+ ж) Проверить как работает процесс создания -
создать несколько задач.

+ 2) Настраиваем TaskUserController

Необходимо настроить экшен для создания доступа к задаче:

+ а) В экшене create присваем атрибуту task_id
модели значение taskId из урла и создаем
список пользователей, кроме текущего,
для выпадающего списка.
Добавить флэш сообщение
 и поменять редирект после создания на созданный
 список своих задач.
+ б) Изменяем вьюху _form - удалив поле task_id
и заменив user_id выпадающим списком
с переданным из контроллера массивом пользователей.
+ в) Сделать проверку автора заметки при создании доступа.
+ г) Проверяем как работает создание доступа.

3) Настраиваем layout

+ В меню сайта убираем ссылки about-
+ contact
и делаем две ссылки на создание задачи и
+ списка своих задач.

+ 1) Task

+ а) Создаем экшен shared - список расшаренных задач,
экшен отличается от my тем, что к query создаваемому
для датапровайдера присоединен с помощью inner join релейшен taskUsers.
Во вьюхе shared выводим название и текст задач,
кнопку удаления доступа для всех юзеров,
работающую с подтверждением и отправкой по POST
(сделать по аналогии как кнопка удаления во view.php).
+ б) Создаем экшен accessed - список доступных чужих задач.
Во вьюхе accessed выводим название, текст,
имя автора со ссылкой на его страницу просмотра
и время создания.
+ в) Добавляем флэш-сообщения после создания,
изменения и удаления.
+ г) Добавляем при изменения и удалении проверку,
+ что текущий пользователь создатель задачи,
при просмотре создатель или имеющий доступ,
если нет - выбрасываем исключение.
+ д) Меняем редиректы после создания,
изменения и удаления на my.

+ 2)TaskUser

+ а) Сделать экшен deleteAll для удаления доступов к задаче.
Сделать проверку на то, что удаляем доступы именно
к своей задаче и
+ добавить экшен в VerbFilter
+ для выполнения только по POST.
После удаления добавляем флэш-сообщение
и редирект после на /task/shared.
+ б) Удаляем экшены index, update и view.

+ 3) Настраиваем layout

+ Добавляем в меню ссылки на список
расшаренных и доступных заметок.

+ 4)Настраиваем урлы

Урл страниц просмотра для всех контроллеров
д.б. вида /task/1

5) Дополнительно

Делаем возможность удалять доступ
к заметке одного конкретного пользователя.
+ 1) Во вьюхе task/view только для своей задачи!
вывести в помощью Gridview список всех доступов (TaskUser),
которых предоставили другим пользователям.
В таблице сделать одну кнопку - удаления,
ведущую на task-user/delete,
передающую в параметре id для task_user и работающую по POST.
2) В экшене task-user/delete реализовать проверку удаления
+ доступа именно к своей задаче - не запутайтесь
в данном случае в параметре id будет для task_user,
а не задачи! Добавить флэш сообщение после удаления.
